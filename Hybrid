import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics.pairwise import cosine_similarity

# Mock dataset for collaborative filtering
user_movie_ratings = [
    [4, 0, 3, 5, 0],
    [0, 2, 4, 0, 1],
    [3, 5, 0, 4, 0],
    [0, 1, 5, 0, 2],
    [2, 0, 0, 3, 4],
]

# Mock dataset for content-based filtering
movie_titles = ["Movie 1", "Movie 2", "Movie 3", "Movie 4", "Movie 5"]
movie_genres = [
    [1, 0, 1, 0, 0],
    [0, 1, 0, 1, 0],
    [1, 0, 0, 0, 1],
    [0, 1, 1, 0, 0],
    [0, 0, 0, 1, 1],
]

# Calculate user similarity for collaborative filtering (user-based)
def pearson_correlation(u1, u2):
    common_ratings = np.where((u1 != 0) & (u2 != 0))
    if len(common_ratings[0]) == 0:
        return 0
    u1_common = u1[common_ratings]
    u2_common = u2[common_ratings]
    if np.std(u1_common) == 0 or np.std(u2_common) == 0:
        return 0
    return np.corrcoef(u1_common, u2_common)[0, 1]

user_movie_ratings = np.array(user_movie_ratings)
num_users, num_movies = user_movie_ratings.shape
user_similarity_matrix = np.zeros((num_users, num_users))
for i in range(num_users):
    for j in range(num_users):
        user_similarity_matrix[i, j] = pearson_correlation(user_movie_ratings[i], user_movie_ratings[j])

# Calculate item similarity for content-based filtering
movie_genres = np.array(movie_genres)
genre_similarity_matrix = cosine_similarity(movie_genres)

# Visualize similarity matrices using heatmaps
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
sns.heatmap(user_similarity_matrix, annot=True, cmap="coolwarm", square=True, xticklabels=movie_titles, yticklabels=movie_titles)
plt.title("User Similarity Matrix (Collaborative Filtering)")

plt.subplot(1, 2, 2)
sns.heatmap(genre_similarity_matrix, annot=True, cmap="coolwarm", square=True, xticklabels=movie_titles, yticklabels=movie_titles)
plt.title("Genre Similarity Matrix (Content-Based Filtering)")

plt.show()
