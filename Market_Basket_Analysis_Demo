# Import libraries
import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, fpgrowth, association_rules

# Load data
data = [['A', 'B', 'C', 'D'],
        ['B', 'C', 'D', 'E'],
        ['A', 'B', 'C', 'E'],
        ['A', 'B', 'D', 'E'],
        ['B', 'C', 'E'],
        ['A', 'C', 'D', 'E'],
        ['A', 'B', 'C'],
        ['B', 'C', 'D', 'E'],
        ['A', 'B', 'E'],
        ['B', 'D', 'E']]

# Convert to binary matrix format
te = TransactionEncoder()
te_ary = te.fit_transform(data)
df = pd.DataFrame(te_ary, columns=te.columns_)

# Apply Apriori algorithm
frequent_itemsets_apriori = apriori(df, min_support=0.2, use_colnames=True)

# Generate association rules using Apriori
rules_apriori = association_rules(frequent_itemsets_apriori, metric="lift", min_threshold=1)

# Print frequent itemsets and association rules generated by Apriori
print('Frequent itemsets using Apriori:')
print(frequent_itemsets_apriori)
print('\nAssociation rules using Apriori:')
print(rules_apriori)

# Apply FP-Growth algorithm
frequent_itemsets_fpgrowth = fpgrowth(df, min_support=0.2, use_colnames=True)

# Generate association rules using FP-Growth
rules_fpgrowth = association_rules(frequent_itemsets_fpgrowth, metric="lift", min_threshold=1)

# Print frequent itemsets and association rules generated by FP-Growth
print('\nFrequent itemsets using FP-Growth:')
print(frequent_itemsets_fpgrowth)
print('\nAssociation rules using FP-Growth:')
print(rules_fpgrowth)

# Compare performance of the algorithms based on validation metrics
print('\nValidation metrics:')
print('Apriori support: {}'.format(rules_apriori['support'].mean()))
print('FP-Growth support: {}'.format(rules_fpgrowth['support'].mean()))
print('Apriori confidence: {}'.format(rules_apriori['confidence'].mean()))
print('FP-Growth confidence: {}'.format(rules_fpgrowth['confidence'].mean()))
print('Apriori lift: {}'.format(rules_apriori['lift'].mean()))
print('FP-Growth lift: {}'.format(rules_fpgrowth['lift'].mean()))

# Choose the algorithm with the better validation metrics
if rules_fpgrowth['lift'].mean() > rules_apriori['lift'].mean():
    print('\nFP-Growth algorithm is recommended.')
else:
    print('\nApriori algorithm is recommended.')
